TITLE   LAB1_VAR1_ELUSHEV_4317
;---------------------------------------ОПРЕДЕЛЕНИЕ СЕГМЕНТА СТЕКА-----------------------
STACKSG SEGMENT PARA STACK 
        DB 64 DUP(?)    ;резервируем 64 байта
STACKSG ENDS
;--------------------------------------ОПРЕДЕЛЕНИЕ СЕГМЕНТА ДАННЫХ--------------------
DATASG  SEGMENT PARA 'DATA'     			   ; Определение начала сегмента с именем DATASG
STR1    DB '123456789ABCDEF'
STR1_1  DB '12345s678'
STR1_2  DB 8 DUP(' ')
DATASG  ENDS                    			   ; Определение конца сегмента DATASG
;--------------------------------------Определение сегмента комманд--------------------------------
CODESG  SEGMENT PARA 'CODE'     			   ; Определение начала сегмента с именем CODESG
		ASSUME  CS:CODESG,DS:DATASG,SS:STACKSG ; соответствие между конкpетными сегментами и сегментными pегистpами

ENTRY   PROC FAR 				   ; Инициализировать программу
								   ; Стандартная часть - для нормального завершения работы программы
        PUSH    DS                 ; Пользовательская программа должна сохранить этот адрес, поместив его в стек. Позже, команда RET использует этот адрес для возврата в DOS.
        SUB     AX,AX              ; В системе требуется, чтобы следующее значение в стеке являлось нулевым смещением. Для этого команда SUB очищает регистр AX, вычитая его из этого же регистра AX
        PUSH    AX                 ; Сохраняем в СТЕК регистр AX
        MOV     AX,DATASG          ; Когда объявили нужные данные, сегменту DATASG присваивается какое-то значение  
        MOV     DS,AX              ; И присвоенное DATASG значение заносится в регистр DS 
        SUB     AX,AX  
        MOV  	DX,8               ; общее количество перестановок 
M1:                                ; метка для цикла 
        LEA  	DI,STR1_1          ; загрузить в DI смещение первого байта из STR1 (идем на начало строки 1)
        LEA  	SI,STR1_2          ; загрузить в SI смещение первого байта из STR1 (идем на начало строки 1)		
        MOV  	CX,7               ; Количество повторов для M2
        MOV  	AL,[DI]            ; переслать в AL первый байт из STR1_1 (копировать первый символ STR)
        MOV  	[SI]+7,AL          ; переслать в последний байт из STR1_2 содержимое AL (вставить первый символ в конец STR1_2)
        INC  	DI                 ; DI++ (переход к следующему символу)
M2:                                ; метка для цикла 
        MOV  	AL,[DI]            ; копировать в AL следующий символ из STR1_1 
        MOV    [SI],AL             ; переслать AL в очередной (начиная с первого) байт в STR1_2 
        INC  	DI                 ; DI++ (переход к следующему символу)
        INC  	SI                 ; SI++ (переход к следующему символу)
        LOOP 	M2                 ; Возврат к M2, если количество повторов было меньше чем записано в CX
        LEA  	DI,STR1_1          ; загрузить в DI смещение первого байта из STR1_1 (идем на начало строки 1)
        LEA  	SI,STR1_2          ; загрузить в SI смещение первого байта из STR1_2 (идем на начало строки 1)
        MOV  	CX,8               ; Количество повторов для M3
M3:                                ; метка для цикла 
        MOV  	AL,[SI]
        MOV    [DI],AL
        INC  	DI                 ; DI++ (переход к следующему символу)
        INC  	SI                 ; SI++ (переход к следующему символу)
        LOOP 	M3                 ; Возврат к M3, если количество повторов было меньше чем записано в CX
		LEA  	DI,STR1            ; загрузить в DI смещение первого байта из STR1 (идем на начало строки 1)
        LEA  	SI,STR1_1          ; загрузить в SI смещение первого байта из STR1_1 (идем на начало строки 1)
		MOV  	CX, 8
		MOV  	DI, 2
M4:                                ; метка для цикла 
		MOV  	AL, [SI]           ; Копировать очередной символ из 
		MOV    [DI], AL            ; Вставить очередной символ в 
		INC  	DI                 ; DI++ (переход к следующему символу)
		INC  	SI                 ; SI++ (переход к следующему символу)
		LOOP 	M4                 ; Возврат к M4, если количество повторов было меньше чем записано в CX
        DEC  	DX                 ; DX=DX-1
        CMP  	DX,00              ; Все перестановки сделаны? 
        JNE  	M1                 ; Нет - идти на M1 
		RET                        ; Возврат в DOS
ENTRY   ENDP
CODESG  ENDS                       ; Определение конца сегмента CODESG
		END   ENTRY